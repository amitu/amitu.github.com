Introduction
------------
The program is designed to help manage tasks using techniques
such as Getting Things Done by David Allen. Check out
http://www.henspace.co.uk for more information and detailed help.
To use the program, simply enter the task at the prompt.
All of the commands are displayed in the next section.
!PAUSE!
COMMANDS
--------
Commands that have more than one method of entry are shown separated by /
e.g HELP/H means that you can enter either HELP or an H.
All commands can be entered in upper or lower case.
Items shown in square brackets are optional.
Items shown separated by the | symbol are alternatives.  e.g ON|OFF means
you should type either ON or OFF.
Note that some commands refer to adding tasks to the top or bottom of the
list.  However the task's position in the list is also determined by its.
priority.  So, for example, adding a task to the top will still not allow
it to precede tasks that have been assigned a higher priority number. 
!PAUSE!
GENERAL COMMANDS
----------------
?                  : displays a quick reference card
HELP/H             : displays this help.
VERSION/VER        : display the version.
WEB                : Go to the website for more information
CLEARSCREEN/CLS    : Clear the screen
COLOR/COLOUR/C [N] : Use colour display (not Windows) N=1 for no background
MONOCHROME/MONO    : Use monochrome display
EXPORT             : Export the tasks only to filename.tasks.txt
IMPORT file        : Import tasks from the file
REVIEW/REV ON|OFF  : If on, hitting enter moves to the next task
                   : If off, enter re-displays the current task
V0                 : Same as REVIEW OFF
V1                 : Same as REVIEW ON
SAVE/S             : Save the tasks
O/OPEN file        : Open a new data file.
NEW file           : Create a new data file.
AUTOSAVE/AS ON|OFF : Switch autosave on or off
SYS ON|OFF         : Allow the program to use system calls.
!CMD  command      : Run a system command.
2                  : Start a two minute timer (for GTD)
QUIT/Q             : quit the program
!PAUSE!
TASK ENTRY AND EDITING COMMANDS
-------------------------------
For the editing commands that require a task number, you can
replace N by '^' or 'this' to refer to the current task.
ADD/A/+ the task   : add a task to the bottom of the list.
                   : Entering any line that does not begin with
                   : a valid command and which is greater than 10
                   : characters long is also assumed to be an addition.
EDIT/ED [N]        : Create task, or edit task N, using external editor.
SUB/SU N /s1/s2/   : Replace text s1 with s2 in task N. Use \/ if you
                   : need to include the / character.
NOTE/NOTES text    : shorthand for ADD #0 @Notes text
IMMEDIATE/I/++     : add a task to the top of the list to do today.
REP/R N [text]     : replace task N
MOD/M N [text]     : modify task N.
EXTEND/E N [text]  : add more text to task N
FIRST/F N          : move task N to the top.
DOWN/D/ N          : move task N down the queue
UP/U/ N            : move task N up the queue
!PAUSE!
TASK REMOVAL COMMANDS
---------------------
KILL/K/X/- N       : kill (delete) task N. You must define N
DONE N [text]      : Remove task N and move to an archive file
ARCHIVE N [text]   : Same as DONE
CLEAR              : Remove all tasks
!PAUSE!
DISPLAY COMMANDS
----------------
SHOW N             : display encrypted text for task N
FILTER/FI [filter] : set a filter.  Applies to all displays
                   : See list for details of the filter
                   : Setting the filter to nothing clears it.
TOP/T [N]          : Go to top, list N tasks, and display the top task
NEXT/N             : display the next task. Same as just hitting enter
PREV/P             : display previous task
GO/G N             : display task N
LIST/L [filter]    : list tasks. Filter = context, project, priority, date
                   : or word. Contexts begin with @ and projects with :p
                   : Dates begin with :d, anything else is a search word.
                   : Precede term with - to exclude e.g.  -@Computer
                   : e.g LIST @computer or LIST #5
@                  : sorted list by Context.
:D                 : sorted list by Dates
:P                 : sorted list by Projects
LIST>/L> [filter]  : standard list sent to an HTML report
@>                 : sorted list by Context sent to an HTML report
:D>                : sorted list by Dates sent to an HTML report
:P>                : sorted list by Projects sent to an HTML report
                   : The HTML reports are sent to todoFilename.html
!PAUSE!
ADVANCED OPTIONS
----------------
The SETEDxxx commands allow you to use an external editor.
Note the editor you pick should be a simple text editor.  If you pick
something that doesn't work, try the defaults again.
Because some systems may have different editors installed, you can set
more than one by separating the editors usng commas.  The program will
use the first one it finds.
For Windows the default is edit, which works quite well in the terminal
but you could change it to notepad.
For Linux, the default is nano,pico,vim,emacs.
To use external editors you must switch on system calls using the SYS ON
command
SETEDNT command    : Set the external editor for Windows (NT).
SETEDPOSIX command : Set the editor for posix systems.
                   : e.g. SETEDNT edit
                   :      SETEDPOSIX nano,vim
SHORTCUT/SC ?      : list shortcuts
SHORTCUT/SC N cmd  : Set shortcut N to command cmd
=N                 : Run shortcut N
!PAUSE!
ABBREV/AB @x @full : Create new abbreviation. @x expands to @full
ABBREV/AB ?        : List context abbreviations.
PAB :px :pfull     : Project abbreviation. :px expands to :pfull
PAB ?              : List project abbreviations.
!PAUSE!
ENTERING TASKS
--------------
When you enter a task, you can embed any number of contexts in the task.
You can also embed a project description by preceding it with :p
You can assign a priority by preceding a number by #.  e.g. #9.
If you don't enter a number, a default of 5 is used.  The higher the 
number the more important it is. Priorities range from 1 to 10.
Only the first # is used for the priority so you can use # as
a normal character as long as you precede it with a priority number.
You can define a date when the task must be done by preceding the date
with :d, i.e :dYYYY/MM/DD or :dMM/DD or :dDD. If you omit the year/month
they default to the current date. Adding a date automatically creates an
@Date context for the task.
So, for example, to add a new task to e-mail Joe, we could enter:
+ e-mail joe @computer
or to add a task to the decorating project, we could enter:
+ buy wallpaper :pdecorating
to enter a task with an importance of 9 we could enter:
+ book that holiday #9 @Internet
!PAUSE!
MODIFYING AND EXTENDING TASKS
-----------------------------
The modify command allows you to change part of an existing task.
So for example, imagine you have a task:
[05] Buy some food #9 @Internet Projects:Shopping
Enter the command M 5 and then type:
@C
Because the only element we have entered is a new context, only
that part is modified, so we get.
[05] Buy some food #9 @Computer Projects:Shopping
Likewise, had we entered:
Buy some tea :pEating
We would have got
[05] Buy some tea #9 @Internet Projects:Eating
The extend command is similar but it appends the entry. So had
we used the command E 5 instead of M 5 the result would have been
[05] Buy some food ... Buy some tea #9 @Internet Projects:Eating
!PAUSE!
CONTEXTS
--------
Any word preceded by @ will be used as a context.  Contexts are like
sub-categories or sub-lists.  There are a number of pre-defined
abbreviations that you can use as well. The recognised abbreviations
are:
@A = @Anywhere (this is the default)
@C = @Computer
@D = @Desk
@E = @Errands
@H = @Home
@I = @Internet
@L = @Lunch
@M = @Meeting
@N = @Next
@O = @Other
@P = @Phone
@PW= @Password
@S = @Someday/maybe
@W4= @Waiting_for
@W = @Work
!PAUSE!
ENTERING DATES
--------------
An @Date context is created if you embed a date in the task.
Dates are embedded using the :dDATE format.
Valid DATE formats are yyyy-mm-dd, mm-dd or dd
You can also use : or / as the separators.  So, for example:
:d2006/12/22 or :d2006-11-7 or :d9/28 are all valid entries.

If you set a date, then until that date is reached, the task is given
an effective priority of 0.  Once the date is reached, the task's
priority is increased by 11, moving it to the of the list.

A date entry of :d0 can be used to clear a date entry.
A date entry of :d+X can be used to create a date entry of today + X days.
So :d+1 is tomorrow and :d+0 is today.
!PAUSE!
ENCRYPTING TEXT
---------------
If you want to encrypt text you can use the <private> or <secret> tags or
their abbreviations <p> and <s>.
These tags will result in all text following the tag to be encrypted.
Note that any special commands, @contexts for example, are treated as plain
text in the encrypted portion.
To display the text you will need to use the SHOW command.

The <private> tag uses the inbuilt XTEA algorithm.  This is supposedly a
relatively secure method but probably not suitable for very sensitive data.

The <secret> tag can only be used if you have the pyRijndael.py module.
This uses a 256 bit Rinjdael cipher.  The module can be downloaded from 
http://jclement.ca/software/pyrijndael/
You can install this in your Python path or just place it alongside your
ikog file.
Note you cannot use the extend command with encrypted text.

!PAUSE!
MARKING TASKS AS COMPLETE
-------------------------
The normal way to mark a task as complete is just to remove it using the
KILL command.  If you want to keep track of tasks you have finished, you
can use the ARCHIVE or DONE command.  This gives the task an @Archived
context, changes the date to today and then moves it from the current
file to a file with archive.dat appended.  The archive file is a valid
ikog file so you can use the OPEN command to view it, edit it and run
reports in the normal way.  So assuming your current script is ikog.py,
to archive the current task you could enter:

ARCHIVE ^ I have finished this

This would move the task to a file called ikog.py.archive.dat

!PAUSE!
USING EXTERNAL DATA
-------------------
Normally the tasks are embedded in the main program file so all you have
to carry around with you is the ikog.py file.  The advantage is that you
only have one file to look after; the disadvantage is that every time you
save a task you have to save the program as well.  If you want, you can
keep your tasks in a separate file.
To do this, use the EXPORT function to create a file ikog.py.tasks.txt
Use the CLEAR command to remove the tasks from your main ikog.py program.
Rename the exported file from ikog.py.tasks.txt to ikog.py.dat
Ikog will now use this file for storing your tasks.

!PAUSE!
PASSING TASKS VIA THE COMMAND LINE
----------------------------------
It is possible to add tasks via the command line. The general format of
the command line is:
   ikog.py filename commands
The filename is the name of the data file containing your tasks.  You
can use . to represent the default internal tasks.
Commands is a set of normal ikog commands separated by the / 
character. Note there must be a space either side of the /.
So to add a task and then exit the program we could just enter:
   ikog.py . + here is my task / QUIT
Note that we added the quit command to exit ikog.
You must make sure that you do not use any commands that require user
input.  Deleting tasks via the command line is more complicated as you
need to find the task automatically.  If you do try to delete this way,
use the filter command to find some unique text and then delete it. eg.
   ikog.py . FI my_unique_text / KILL THIS / QUIT
Use THIS instead of ^ as a caret has a special meaning in Windows.
If you do intend automating ikog from the command line, you should add
a unique reference to each task so you can find it later using FILTER. eg.
+ this is my task ref_1256
